// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AccuredSIGHTransferredToTheUser extends ethereum.Event {
  get params(): AccuredSIGHTransferredToTheUser__Params {
    return new AccuredSIGHTransferredToTheUser__Params(this);
  }
}

export class AccuredSIGHTransferredToTheUser__Params {
  _event: AccuredSIGHTransferredToTheUser;

  constructor(event: AccuredSIGHTransferredToTheUser) {
    this._event = event;
  }

  get instrument(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sigh_Amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CryptoMarketSentimentUpdated extends ethereum.Event {
  get params(): CryptoMarketSentimentUpdated__Params {
    return new CryptoMarketSentimentUpdated__Params(this);
  }
}

export class CryptoMarketSentimentUpdated__Params {
  _event: CryptoMarketSentimentUpdated;

  constructor(event: CryptoMarketSentimentUpdated) {
    this._event = event;
  }

  get previsSpeedUpperCheckAllowed(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get cryptoMarketSentiment(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InstrumentAdded extends ethereum.Event {
  get params(): InstrumentAdded__Params {
    return new InstrumentAdded__Params(this);
  }
}

export class InstrumentAdded__Params {
  _event: InstrumentAdded;

  constructor(event: InstrumentAdded) {
    this._event = event;
  }

  get instrumentAddress_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get iTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sighStreamAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get decimals(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class InstrumentRemoved extends ethereum.Event {
  get params(): InstrumentRemoved__Params {
    return new InstrumentRemoved__Params(this);
  }
}

export class InstrumentRemoved__Params {
  _event: InstrumentRemoved;

  constructor(event: InstrumentRemoved) {
    this._event = event;
  }

  get _instrument(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InstrumentSIGHStateUpdated extends ethereum.Event {
  get params(): InstrumentSIGHStateUpdated__Params {
    return new InstrumentSIGHStateUpdated__Params(this);
  }
}

export class InstrumentSIGHStateUpdated__Params {
  _event: InstrumentSIGHStateUpdated;

  constructor(event: InstrumentSIGHStateUpdated) {
    this._event = event;
  }

  get instrument_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isSIGHMechanismActivated(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get bearSentiment(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bullSentiment(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class InstrumentVolatilityCalculated extends ethereum.Event {
  get params(): InstrumentVolatilityCalculated__Params {
    return new InstrumentVolatilityCalculated__Params(this);
  }
}

export class InstrumentVolatilityCalculated__Params {
  _event: InstrumentVolatilityCalculated;

  constructor(event: InstrumentVolatilityCalculated) {
    this._event = event;
  }

  get _Instrument(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _total24HrVolatility(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _total24HrSentimentVolatility(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MaxSIGHSpeedCalculated extends ethereum.Event {
  get params(): MaxSIGHSpeedCalculated__Params {
    return new MaxSIGHSpeedCalculated__Params(this);
  }
}

export class MaxSIGHSpeedCalculated__Params {
  _event: MaxSIGHSpeedCalculated;

  constructor(event: MaxSIGHSpeedCalculated) {
    this._event = event;
  }

  get _SIGHSpeed(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _SIGHSpeedUsed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _totalVolatilityLimitPerBlock(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _maxVolatilityToAddressPerBlock(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _max_SIGHDistributionLimitDecimalsAdjusted(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PriceSnapped extends ethereum.Event {
  get params(): PriceSnapped__Params {
    return new PriceSnapped__Params(this);
  }
}

export class PriceSnapped__Params {
  _event: PriceSnapped;

  constructor(event: PriceSnapped) {
    this._event = event;
  }

  get instrument(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prevPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get currentPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get deltaBlocks(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get currentClock(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SIGHBorrowIndexUpdated extends ethereum.Event {
  get params(): SIGHBorrowIndexUpdated__Params {
    return new SIGHBorrowIndexUpdated__Params(this);
  }
}

export class SIGHBorrowIndexUpdated__Params {
  _event: SIGHBorrowIndexUpdated;

  constructor(event: SIGHBorrowIndexUpdated) {
    this._event = event;
  }

  get instrument(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalCompoundedStableBorrows(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalCompoundedVariableBorrows(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sighAccured(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get ratioMantissa(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get newIndexMantissa(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SIGHSpeedUpdated extends ethereum.Event {
  get params(): SIGHSpeedUpdated__Params {
    return new SIGHSpeedUpdated__Params(this);
  }
}

export class SIGHSpeedUpdated__Params {
  _event: SIGHSpeedUpdated;

  constructor(event: SIGHSpeedUpdated) {
    this._event = event;
  }

  get oldSIGHSpeed(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newSIGHSpeed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNumber_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SIGHSupplyIndexUpdated extends ethereum.Event {
  get params(): SIGHSupplyIndexUpdated__Params {
    return new SIGHSupplyIndexUpdated__Params(this);
  }
}

export class SIGHSupplyIndexUpdated__Params {
  _event: SIGHSupplyIndexUpdated;

  constructor(event: SIGHSupplyIndexUpdated) {
    this._event = event;
  }

  get instrument(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get totalCompoundedSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sighAccured(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ratioMantissa(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newIndexMantissa(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get blockNum(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class StakingSpeedUpdated extends ethereum.Event {
  get params(): StakingSpeedUpdated__Params {
    return new StakingSpeedUpdated__Params(this);
  }
}

export class StakingSpeedUpdated__Params {
  _event: StakingSpeedUpdated;

  constructor(event: StakingSpeedUpdated) {
    this._event = event;
  }

  get instrumentAddress_(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prevStakingSpeed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get new_staking_Speed(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class minimumTimestampForSpeedRefreshUpdated extends ethereum.Event {
  get params(): minimumTimestampForSpeedRefreshUpdated__Params {
    return new minimumTimestampForSpeedRefreshUpdated__Params(this);
  }
}

export class minimumTimestampForSpeedRefreshUpdated__Params {
  _event: minimumTimestampForSpeedRefreshUpdated;

  constructor(event: minimumTimestampForSpeedRefreshUpdated) {
    this._event = event;
  }

  get prevDeltaBlocksForSpeed(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newDeltaBlocksForSpeed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blockNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class refreshingSighSpeeds extends ethereum.Event {
  get params(): refreshingSighSpeeds__Params {
    return new refreshingSighSpeeds__Params(this);
  }
}

export class refreshingSighSpeeds__Params {
  _event: refreshingSighSpeeds;

  constructor(event: refreshingSighSpeeds) {
    this._event = event;
  }

  get _Instrument(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get side(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get supplierSpeed(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get borrowerSpeed(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _percentTotalSentimentVolatility(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _percentTotalVolatility(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SIGHDistributionHandler__getInstrumentDataResult {
  value0: string;
  value1: Address;
  value2: BigInt;
  value3: boolean;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: string,
    value1: Address,
    value2: BigInt,
    value3: boolean,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class SIGHDistributionHandler__getInstrumentSighLimitsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SIGHDistributionHandler__getInstrumentSpeedsResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class SIGHDistributionHandler__getInstrumentVolatilityStatesResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: i32,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class SIGHDistributionHandler extends ethereum.SmartContract {
  static bind(address: Address): SIGHDistributionHandler {
    return new SIGHDistributionHandler("SIGHDistributionHandler", address);
  }

  Instrument_SIGH_StateUpdated(
    instrument_: Address,
    _bearSentiment: BigInt,
    _bullSentiment: BigInt,
    _isSIGHMechanismActivated: boolean
  ): boolean {
    let result = super.call(
      "Instrument_SIGH_StateUpdated",
      "Instrument_SIGH_StateUpdated(address,uint256,uint256,bool):(bool)",
      [
        ethereum.Value.fromAddress(instrument_),
        ethereum.Value.fromUnsignedBigInt(_bearSentiment),
        ethereum.Value.fromUnsignedBigInt(_bullSentiment),
        ethereum.Value.fromBoolean(_isSIGHMechanismActivated)
      ]
    );

    return result[0].toBoolean();
  }

  try_Instrument_SIGH_StateUpdated(
    instrument_: Address,
    _bearSentiment: BigInt,
    _bullSentiment: BigInt,
    _isSIGHMechanismActivated: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "Instrument_SIGH_StateUpdated",
      "Instrument_SIGH_StateUpdated(address,uint256,uint256,bool):(bool)",
      [
        ethereum.Value.fromAddress(instrument_),
        ethereum.Value.fromUnsignedBigInt(_bearSentiment),
        ethereum.Value.fromUnsignedBigInt(_bullSentiment),
        ethereum.Value.fromBoolean(_isSIGHMechanismActivated)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  Sigh_Address(): Address {
    let result = super.call("Sigh_Address", "Sigh_Address():(address)", []);

    return result[0].toAddress();
  }

  try_Sigh_Address(): ethereum.CallResult<Address> {
    let result = super.tryCall("Sigh_Address", "Sigh_Address():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addInstrument(
    _instrument: Address,
    _iTokenAddress: Address,
    _sighStreamAddress: Address,
    _decimals: BigInt
  ): boolean {
    let result = super.call(
      "addInstrument",
      "addInstrument(address,address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_instrument),
        ethereum.Value.fromAddress(_iTokenAddress),
        ethereum.Value.fromAddress(_sighStreamAddress),
        ethereum.Value.fromUnsignedBigInt(_decimals)
      ]
    );

    return result[0].toBoolean();
  }

  try_addInstrument(
    _instrument: Address,
    _iTokenAddress: Address,
    _sighStreamAddress: Address,
    _decimals: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addInstrument",
      "addInstrument(address,address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_instrument),
        ethereum.Value.fromAddress(_iTokenAddress),
        ethereum.Value.fromAddress(_sighStreamAddress),
        ethereum.Value.fromUnsignedBigInt(_decimals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addressesProvider(): Address {
    let result = super.call(
      "addressesProvider",
      "addressesProvider():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_addressesProvider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressesProvider",
      "addressesProvider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkPriceSnapshots(instrument_: Address, clock: BigInt): BigInt {
    let result = super.call(
      "checkPriceSnapshots",
      "checkPriceSnapshots(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(instrument_),
        ethereum.Value.fromUnsignedBigInt(clock)
      ]
    );

    return result[0].toBigInt();
  }

  try_checkPriceSnapshots(
    instrument_: Address,
    clock: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkPriceSnapshots",
      "checkPriceSnapshots(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(instrument_),
        ethereum.Value.fromUnsignedBigInt(clock)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkinitializationCounter(instrument_: Address): BigInt {
    let result = super.call(
      "checkinitializationCounter",
      "checkinitializationCounter(address):(uint32)",
      [ethereum.Value.fromAddress(instrument_)]
    );

    return result[0].toBigInt();
  }

  try_checkinitializationCounter(
    instrument_: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkinitializationCounter",
      "checkinitializationCounter(address):(uint32)",
      [ethereum.Value.fromAddress(instrument_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllInstrumentsSupported(): Array<Address> {
    let result = super.call(
      "getAllInstrumentsSupported",
      "getAllInstrumentsSupported():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllInstrumentsSupported(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllInstrumentsSupported",
      "getAllInstrumentsSupported():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllPriceSnapshots(instrument_: Address): Array<BigInt> {
    let result = super.call(
      "getAllPriceSnapshots",
      "getAllPriceSnapshots(address):(uint256[24])",
      [ethereum.Value.fromAddress(instrument_)]
    );

    return result[0].toBigIntArray();
  }

  try_getAllPriceSnapshots(
    instrument_: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllPriceSnapshots",
      "getAllPriceSnapshots(address):(uint256[24])",
      [ethereum.Value.fromAddress(instrument_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBlockNumber(): BigInt {
    let result = super.call("getBlockNumber", "getBlockNumber():(uint32)", []);

    return result[0].toBigInt();
  }

  try_getBlockNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockNumber",
      "getBlockNumber():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBlockNumbersForPriceSnapshots(): Array<BigInt> {
    let result = super.call(
      "getBlockNumbersForPriceSnapshots",
      "getBlockNumbersForPriceSnapshots():(uint256[24])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getBlockNumbersForPriceSnapshots(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBlockNumbersForPriceSnapshots",
      "getBlockNumbersForPriceSnapshots():(uint256[24])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBlocksRemainingToNextSpeedRefresh(): BigInt {
    let result = super.call(
      "getBlocksRemainingToNextSpeedRefresh",
      "getBlocksRemainingToNextSpeedRefresh():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBlocksRemainingToNextSpeedRefresh(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlocksRemainingToNextSpeedRefresh",
      "getBlocksRemainingToNextSpeedRefresh():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCryptoMarketSentiment(): BigInt {
    let result = super.call(
      "getCryptoMarketSentiment",
      "getCryptoMarketSentiment():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCryptoMarketSentiment(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCryptoMarketSentiment",
      "getCryptoMarketSentiment():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeltaBlocksForSpeed(): BigInt {
    let result = super.call(
      "getDeltaBlocksForSpeed",
      "getDeltaBlocksForSpeed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDeltaBlocksForSpeed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDeltaBlocksForSpeed",
      "getDeltaBlocksForSpeed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeltaBlockslast24HrSession(): BigInt {
    let result = super.call(
      "getDeltaBlockslast24HrSession",
      "getDeltaBlockslast24HrSession():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDeltaBlockslast24HrSession(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDeltaBlockslast24HrSession",
      "getDeltaBlockslast24HrSession():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInstrumentBorrowIndex(instrument_: Address): BigInt {
    let result = super.call(
      "getInstrumentBorrowIndex",
      "getInstrumentBorrowIndex(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_)]
    );

    return result[0].toBigInt();
  }

  try_getInstrumentBorrowIndex(
    instrument_: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInstrumentBorrowIndex",
      "getInstrumentBorrowIndex(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInstrumentData(
    instrument_: Address
  ): SIGHDistributionHandler__getInstrumentDataResult {
    let result = super.call(
      "getInstrumentData",
      "getInstrumentData(address):(string,address,uint256,bool,uint256,uint256)",
      [ethereum.Value.fromAddress(instrument_)]
    );

    return new SIGHDistributionHandler__getInstrumentDataResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getInstrumentData(
    instrument_: Address
  ): ethereum.CallResult<SIGHDistributionHandler__getInstrumentDataResult> {
    let result = super.tryCall(
      "getInstrumentData",
      "getInstrumentData(address):(string,address,uint256,bool,uint256,uint256)",
      [ethereum.Value.fromAddress(instrument_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SIGHDistributionHandler__getInstrumentDataResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getInstrumentSighLimits(
    instrument: Address
  ): SIGHDistributionHandler__getInstrumentSighLimitsResult {
    let result = super.call(
      "getInstrumentSighLimits",
      "getInstrumentSighLimits(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(instrument)]
    );

    return new SIGHDistributionHandler__getInstrumentSighLimitsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getInstrumentSighLimits(
    instrument: Address
  ): ethereum.CallResult<
    SIGHDistributionHandler__getInstrumentSighLimitsResult
  > {
    let result = super.tryCall(
      "getInstrumentSighLimits",
      "getInstrumentSighLimits(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(instrument)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SIGHDistributionHandler__getInstrumentSighLimitsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getInstrumentSpeeds(
    instrument: Address
  ): SIGHDistributionHandler__getInstrumentSpeedsResult {
    let result = super.call(
      "getInstrumentSpeeds",
      "getInstrumentSpeeds(address):(uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(instrument)]
    );

    return new SIGHDistributionHandler__getInstrumentSpeedsResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getInstrumentSpeeds(
    instrument: Address
  ): ethereum.CallResult<SIGHDistributionHandler__getInstrumentSpeedsResult> {
    let result = super.tryCall(
      "getInstrumentSpeeds",
      "getInstrumentSpeeds(address):(uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(instrument)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SIGHDistributionHandler__getInstrumentSpeedsResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getInstrumentSupplyIndex(instrument_: Address): BigInt {
    let result = super.call(
      "getInstrumentSupplyIndex",
      "getInstrumentSupplyIndex(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_)]
    );

    return result[0].toBigInt();
  }

  try_getInstrumentSupplyIndex(
    instrument_: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getInstrumentSupplyIndex",
      "getInstrumentSupplyIndex(address):(uint256)",
      [ethereum.Value.fromAddress(instrument_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInstrumentVolatilityStates(
    instrument: Address
  ): SIGHDistributionHandler__getInstrumentVolatilityStatesResult {
    let result = super.call(
      "getInstrumentVolatilityStates",
      "getInstrumentVolatilityStates(address):(uint8,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(instrument)]
    );

    return new SIGHDistributionHandler__getInstrumentVolatilityStatesResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getInstrumentVolatilityStates(
    instrument: Address
  ): ethereum.CallResult<
    SIGHDistributionHandler__getInstrumentVolatilityStatesResult
  > {
    let result = super.tryCall(
      "getInstrumentVolatilityStates",
      "getInstrumentVolatilityStates(address):(uint8,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(instrument)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SIGHDistributionHandler__getInstrumentVolatilityStatesResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getLast24HrsTotalProtocolVolatility(): BigInt {
    let result = super.call(
      "getLast24HrsTotalProtocolVolatility",
      "getLast24HrsTotalProtocolVolatility():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLast24HrsTotalProtocolVolatility(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLast24HrsTotalProtocolVolatility",
      "getLast24HrsTotalProtocolVolatility():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLast24HrsTotalSentimentProtocolVolatility(): BigInt {
    let result = super.call(
      "getLast24HrsTotalSentimentProtocolVolatility",
      "getLast24HrsTotalSentimentProtocolVolatility():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLast24HrsTotalSentimentProtocolVolatility(): ethereum.CallResult<
    BigInt
  > {
    let result = super.tryCall(
      "getLast24HrsTotalSentimentProtocolVolatility",
      "getLast24HrsTotalSentimentProtocolVolatility():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPrevSpeedRefreshBlock(): BigInt {
    let result = super.call(
      "getPrevSpeedRefreshBlock",
      "getPrevSpeedRefreshBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPrevSpeedRefreshBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPrevSpeedRefreshBlock",
      "getPrevSpeedRefreshBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSIGHBalance(): BigInt {
    let result = super.call("getSIGHBalance", "getSIGHBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getSIGHBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSIGHBalance",
      "getSIGHBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSIGHSpeed(): BigInt {
    let result = super.call("getSIGHSpeed", "getSIGHSpeed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getSIGHSpeed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getSIGHSpeed", "getSIGHSpeed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSIGHSpeedUsed(): BigInt {
    let result = super.call(
      "getSIGHSpeedUsed",
      "getSIGHSpeedUsed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSIGHSpeedUsed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSIGHSpeedUsed",
      "getSIGHSpeedUsed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isInstrumentSupported(instrument_: Address): boolean {
    let result = super.call(
      "isInstrumentSupported",
      "isInstrumentSupported(address):(bool)",
      [ethereum.Value.fromAddress(instrument_)]
    );

    return result[0].toBoolean();
  }

  try_isInstrumentSupported(
    instrument_: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInstrumentSupported",
      "isInstrumentSupported(address):(bool)",
      [ethereum.Value.fromAddress(instrument_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lendingPoolCore(): Address {
    let result = super.call(
      "lendingPoolCore",
      "lendingPoolCore():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_lendingPoolCore(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lendingPoolCore",
      "lendingPoolCore():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  refreshSIGHSpeeds(): boolean {
    let result = super.call(
      "refreshSIGHSpeeds",
      "refreshSIGHSpeeds():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_refreshSIGHSpeeds(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "refreshSIGHSpeeds",
      "refreshSIGHSpeeds():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  removeInstrument(_instrument: Address): boolean {
    let result = super.call(
      "removeInstrument",
      "removeInstrument(address):(bool)",
      [ethereum.Value.fromAddress(_instrument)]
    );

    return result[0].toBoolean();
  }

  try_removeInstrument(_instrument: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "removeInstrument",
      "removeInstrument(address):(bool)",
      [ethereum.Value.fromAddress(_instrument)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalInstrumentsSupported(): BigInt {
    let result = super.call(
      "totalInstrumentsSupported",
      "totalInstrumentsSupported():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInstrumentsSupported(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInstrumentsSupported",
      "totalInstrumentsSupported():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferSighTotheUser(
    instrument: Address,
    user: Address,
    sigh_Amount: BigInt
  ): BigInt {
    let result = super.call(
      "transferSighTotheUser",
      "transferSighTotheUser(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(instrument),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(sigh_Amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferSighTotheUser(
    instrument: Address,
    user: Address,
    sigh_Amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferSighTotheUser",
      "transferSighTotheUser(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(instrument),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(sigh_Amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateCryptoMarketSentiment(
    isSpeedUpperCheckAllowed_: boolean,
    cryptoMarketSentiment_: BigInt
  ): boolean {
    let result = super.call(
      "updateCryptoMarketSentiment",
      "updateCryptoMarketSentiment(bool,uint256):(bool)",
      [
        ethereum.Value.fromBoolean(isSpeedUpperCheckAllowed_),
        ethereum.Value.fromUnsignedBigInt(cryptoMarketSentiment_)
      ]
    );

    return result[0].toBoolean();
  }

  try_updateCryptoMarketSentiment(
    isSpeedUpperCheckAllowed_: boolean,
    cryptoMarketSentiment_: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateCryptoMarketSentiment",
      "updateCryptoMarketSentiment(bool,uint256):(bool)",
      [
        ethereum.Value.fromBoolean(isSpeedUpperCheckAllowed_),
        ethereum.Value.fromUnsignedBigInt(cryptoMarketSentiment_)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateDeltaBlocksForSpeedRefresh(deltaBlocksLimit: BigInt): boolean {
    let result = super.call(
      "updateDeltaBlocksForSpeedRefresh",
      "updateDeltaBlocksForSpeedRefresh(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(deltaBlocksLimit)]
    );

    return result[0].toBoolean();
  }

  try_updateDeltaBlocksForSpeedRefresh(
    deltaBlocksLimit: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateDeltaBlocksForSpeedRefresh",
      "updateDeltaBlocksForSpeedRefresh(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(deltaBlocksLimit)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateSIGHBorrowIndex(currentInstrument: Address): boolean {
    let result = super.call(
      "updateSIGHBorrowIndex",
      "updateSIGHBorrowIndex(address):(bool)",
      [ethereum.Value.fromAddress(currentInstrument)]
    );

    return result[0].toBoolean();
  }

  try_updateSIGHBorrowIndex(
    currentInstrument: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateSIGHBorrowIndex",
      "updateSIGHBorrowIndex(address):(bool)",
      [ethereum.Value.fromAddress(currentInstrument)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateSIGHSpeed(SIGHSpeed_: BigInt): boolean {
    let result = super.call(
      "updateSIGHSpeed",
      "updateSIGHSpeed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(SIGHSpeed_)]
    );

    return result[0].toBoolean();
  }

  try_updateSIGHSpeed(SIGHSpeed_: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateSIGHSpeed",
      "updateSIGHSpeed(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(SIGHSpeed_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateSIGHSupplyIndex(currentInstrument: Address): boolean {
    let result = super.call(
      "updateSIGHSupplyIndex",
      "updateSIGHSupplyIndex(address):(bool)",
      [ethereum.Value.fromAddress(currentInstrument)]
    );

    return result[0].toBoolean();
  }

  try_updateSIGHSupplyIndex(
    currentInstrument: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateSIGHSupplyIndex",
      "updateSIGHSupplyIndex(address):(bool)",
      [ethereum.Value.fromAddress(currentInstrument)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateStakingSpeedForAnInstrument(
    instrument_: Address,
    newStakingSpeed: BigInt
  ): boolean {
    let result = super.call(
      "updateStakingSpeedForAnInstrument",
      "updateStakingSpeedForAnInstrument(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(instrument_),
        ethereum.Value.fromUnsignedBigInt(newStakingSpeed)
      ]
    );

    return result[0].toBoolean();
  }

  try_updateStakingSpeedForAnInstrument(
    instrument_: Address,
    newStakingSpeed: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateStakingSpeedForAnInstrument",
      "updateStakingSpeedForAnInstrument(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(instrument_),
        ethereum.Value.fromUnsignedBigInt(newStakingSpeed)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class Instrument_SIGH_StateUpdatedCall extends ethereum.Call {
  get inputs(): Instrument_SIGH_StateUpdatedCall__Inputs {
    return new Instrument_SIGH_StateUpdatedCall__Inputs(this);
  }

  get outputs(): Instrument_SIGH_StateUpdatedCall__Outputs {
    return new Instrument_SIGH_StateUpdatedCall__Outputs(this);
  }
}

export class Instrument_SIGH_StateUpdatedCall__Inputs {
  _call: Instrument_SIGH_StateUpdatedCall;

  constructor(call: Instrument_SIGH_StateUpdatedCall) {
    this._call = call;
  }

  get instrument_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bearSentiment(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _bullSentiment(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _isSIGHMechanismActivated(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class Instrument_SIGH_StateUpdatedCall__Outputs {
  _call: Instrument_SIGH_StateUpdatedCall;

  constructor(call: Instrument_SIGH_StateUpdatedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddInstrumentCall extends ethereum.Call {
  get inputs(): AddInstrumentCall__Inputs {
    return new AddInstrumentCall__Inputs(this);
  }

  get outputs(): AddInstrumentCall__Outputs {
    return new AddInstrumentCall__Outputs(this);
  }
}

export class AddInstrumentCall__Inputs {
  _call: AddInstrumentCall;

  constructor(call: AddInstrumentCall) {
    this._call = call;
  }

  get _instrument(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _iTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _sighStreamAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _decimals(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddInstrumentCall__Outputs {
  _call: AddInstrumentCall;

  constructor(call: AddInstrumentCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get addressesProvider_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RefreshConfigCall extends ethereum.Call {
  get inputs(): RefreshConfigCall__Inputs {
    return new RefreshConfigCall__Inputs(this);
  }

  get outputs(): RefreshConfigCall__Outputs {
    return new RefreshConfigCall__Outputs(this);
  }
}

export class RefreshConfigCall__Inputs {
  _call: RefreshConfigCall;

  constructor(call: RefreshConfigCall) {
    this._call = call;
  }
}

export class RefreshConfigCall__Outputs {
  _call: RefreshConfigCall;

  constructor(call: RefreshConfigCall) {
    this._call = call;
  }
}

export class RefreshSIGHSpeedsCall extends ethereum.Call {
  get inputs(): RefreshSIGHSpeedsCall__Inputs {
    return new RefreshSIGHSpeedsCall__Inputs(this);
  }

  get outputs(): RefreshSIGHSpeedsCall__Outputs {
    return new RefreshSIGHSpeedsCall__Outputs(this);
  }
}

export class RefreshSIGHSpeedsCall__Inputs {
  _call: RefreshSIGHSpeedsCall;

  constructor(call: RefreshSIGHSpeedsCall) {
    this._call = call;
  }
}

export class RefreshSIGHSpeedsCall__Outputs {
  _call: RefreshSIGHSpeedsCall;

  constructor(call: RefreshSIGHSpeedsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveInstrumentCall extends ethereum.Call {
  get inputs(): RemoveInstrumentCall__Inputs {
    return new RemoveInstrumentCall__Inputs(this);
  }

  get outputs(): RemoveInstrumentCall__Outputs {
    return new RemoveInstrumentCall__Outputs(this);
  }
}

export class RemoveInstrumentCall__Inputs {
  _call: RemoveInstrumentCall;

  constructor(call: RemoveInstrumentCall) {
    this._call = call;
  }

  get _instrument(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveInstrumentCall__Outputs {
  _call: RemoveInstrumentCall;

  constructor(call: RemoveInstrumentCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferSighTotheUserCall extends ethereum.Call {
  get inputs(): TransferSighTotheUserCall__Inputs {
    return new TransferSighTotheUserCall__Inputs(this);
  }

  get outputs(): TransferSighTotheUserCall__Outputs {
    return new TransferSighTotheUserCall__Outputs(this);
  }
}

export class TransferSighTotheUserCall__Inputs {
  _call: TransferSighTotheUserCall;

  constructor(call: TransferSighTotheUserCall) {
    this._call = call;
  }

  get instrument(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sigh_Amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferSighTotheUserCall__Outputs {
  _call: TransferSighTotheUserCall;

  constructor(call: TransferSighTotheUserCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateCryptoMarketSentimentCall extends ethereum.Call {
  get inputs(): UpdateCryptoMarketSentimentCall__Inputs {
    return new UpdateCryptoMarketSentimentCall__Inputs(this);
  }

  get outputs(): UpdateCryptoMarketSentimentCall__Outputs {
    return new UpdateCryptoMarketSentimentCall__Outputs(this);
  }
}

export class UpdateCryptoMarketSentimentCall__Inputs {
  _call: UpdateCryptoMarketSentimentCall;

  constructor(call: UpdateCryptoMarketSentimentCall) {
    this._call = call;
  }

  get isSpeedUpperCheckAllowed_(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get cryptoMarketSentiment_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateCryptoMarketSentimentCall__Outputs {
  _call: UpdateCryptoMarketSentimentCall;

  constructor(call: UpdateCryptoMarketSentimentCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateDeltaBlocksForSpeedRefreshCall extends ethereum.Call {
  get inputs(): UpdateDeltaBlocksForSpeedRefreshCall__Inputs {
    return new UpdateDeltaBlocksForSpeedRefreshCall__Inputs(this);
  }

  get outputs(): UpdateDeltaBlocksForSpeedRefreshCall__Outputs {
    return new UpdateDeltaBlocksForSpeedRefreshCall__Outputs(this);
  }
}

export class UpdateDeltaBlocksForSpeedRefreshCall__Inputs {
  _call: UpdateDeltaBlocksForSpeedRefreshCall;

  constructor(call: UpdateDeltaBlocksForSpeedRefreshCall) {
    this._call = call;
  }

  get deltaBlocksLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateDeltaBlocksForSpeedRefreshCall__Outputs {
  _call: UpdateDeltaBlocksForSpeedRefreshCall;

  constructor(call: UpdateDeltaBlocksForSpeedRefreshCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateSIGHBorrowIndexCall extends ethereum.Call {
  get inputs(): UpdateSIGHBorrowIndexCall__Inputs {
    return new UpdateSIGHBorrowIndexCall__Inputs(this);
  }

  get outputs(): UpdateSIGHBorrowIndexCall__Outputs {
    return new UpdateSIGHBorrowIndexCall__Outputs(this);
  }
}

export class UpdateSIGHBorrowIndexCall__Inputs {
  _call: UpdateSIGHBorrowIndexCall;

  constructor(call: UpdateSIGHBorrowIndexCall) {
    this._call = call;
  }

  get currentInstrument(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSIGHBorrowIndexCall__Outputs {
  _call: UpdateSIGHBorrowIndexCall;

  constructor(call: UpdateSIGHBorrowIndexCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateSIGHSpeedCall extends ethereum.Call {
  get inputs(): UpdateSIGHSpeedCall__Inputs {
    return new UpdateSIGHSpeedCall__Inputs(this);
  }

  get outputs(): UpdateSIGHSpeedCall__Outputs {
    return new UpdateSIGHSpeedCall__Outputs(this);
  }
}

export class UpdateSIGHSpeedCall__Inputs {
  _call: UpdateSIGHSpeedCall;

  constructor(call: UpdateSIGHSpeedCall) {
    this._call = call;
  }

  get SIGHSpeed_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateSIGHSpeedCall__Outputs {
  _call: UpdateSIGHSpeedCall;

  constructor(call: UpdateSIGHSpeedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateSIGHSupplyIndexCall extends ethereum.Call {
  get inputs(): UpdateSIGHSupplyIndexCall__Inputs {
    return new UpdateSIGHSupplyIndexCall__Inputs(this);
  }

  get outputs(): UpdateSIGHSupplyIndexCall__Outputs {
    return new UpdateSIGHSupplyIndexCall__Outputs(this);
  }
}

export class UpdateSIGHSupplyIndexCall__Inputs {
  _call: UpdateSIGHSupplyIndexCall;

  constructor(call: UpdateSIGHSupplyIndexCall) {
    this._call = call;
  }

  get currentInstrument(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSIGHSupplyIndexCall__Outputs {
  _call: UpdateSIGHSupplyIndexCall;

  constructor(call: UpdateSIGHSupplyIndexCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateStakingSpeedForAnInstrumentCall extends ethereum.Call {
  get inputs(): UpdateStakingSpeedForAnInstrumentCall__Inputs {
    return new UpdateStakingSpeedForAnInstrumentCall__Inputs(this);
  }

  get outputs(): UpdateStakingSpeedForAnInstrumentCall__Outputs {
    return new UpdateStakingSpeedForAnInstrumentCall__Outputs(this);
  }
}

export class UpdateStakingSpeedForAnInstrumentCall__Inputs {
  _call: UpdateStakingSpeedForAnInstrumentCall;

  constructor(call: UpdateStakingSpeedForAnInstrumentCall) {
    this._call = call;
  }

  get instrument_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newStakingSpeed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateStakingSpeedForAnInstrumentCall__Outputs {
  _call: UpdateStakingSpeedForAnInstrumentCall;

  constructor(call: UpdateStakingSpeedForAnInstrumentCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
